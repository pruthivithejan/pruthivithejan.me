---
import {getCollection, CollectionEntry } from "astro:content"
import Main from "../../layout/main.astro";
import Posts from "@/components/Posts.astro";
import Category from "@/components/Category.astro";
import Related from "@/components/Related.astro";

import { formatBlogPosts } from "../../lib/utils";


export async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  const formattedPosts = formatBlogPosts(allPosts);

  return formattedPosts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
    },
  }));
}

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { title, description, date, category, image } = post.data;

const { Content } = await post.render();

const allPosts = await getCollection("blog");
const formattedPosts = formatBlogPosts(allPosts, {
  sortByDate: false,
});
const relatedPosts = formattedPosts
  .filter(
    (post) => post.data.category === category && post.data.title !== title
  )
  .slice(0, 3);


---

<Main {title} {description} image={image} >
  <Posts
    {title}
    {description}
    {date}
    {category}
    {image}
    {post}
  />
  <div class="py-6">
    <div class="text-white font-body antialiased tracking-wide text-base/loose ">
      <Content />
    </div>
    <div class="py-6">
      <aside class="text-white font-body flex justify-center gap-2 flex-row p-4" aria-label="Blog categories">
        <a href="/blog/category/">
          <h2 class="text-md font-semibold uppercase">Blog Categories</h2>
        </a>
        <Category showCount={false} />
      </aside>
      {
        relatedPosts.length > 0 && (
          <aside class="text-white font-body flex justify-center gap-2 flex-row p-4" aria-label="Related categories">
            <h2 class="text-md font-semibold uppercase">Related Posts</h2>
            <Related {relatedPosts} />
          </aside>
        )
      }
    </div>
  </div>
</Main>
